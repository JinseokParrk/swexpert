#include<iostream>
#include<cstring>
using namespace std;

int map[51][51];
int visit[51][51];
int N, M, R, C, L;
int totalCnt;

void _dfs(int x, int y,int Len) {
	visit[x][y] = Len;
	if (Len == 1) {
		return;
	}
	if (map[x][y] == 1) {
		if (x - 1 >= 0 && visit[x - 1][y] <= Len && (map[x-1][y]==1 || map[x - 1][y] == 2 || map[x - 1][y] == 5 || map[x - 1][y] == 6)) {
			_dfs(x - 1, y,Len-1);
		}if (x + 1 < N && visit[x + 1][y] <= Len && (map[x + 1][y] == 1 || map[x + 1][y] == 2 || map[x + 1][y] == 4 || map[x + 1][y] == 7)) {
			_dfs(x + 1, y, Len - 1);
		}if (y- 1 >=0 && visit[x][y-1] <= Len && (map[x][y-1] == 1 || map[x][y-1] == 3 || map[x][y-1] == 4 || map[x][y-1] == 5)) {
			_dfs(x, y-1, Len - 1);
		}if (y+ 1 < M && visit[x][y+1] <= Len && (map[x][y+1] == 1 || map[x][y+1] == 3 || map[x][y+1] == 6 || map[x][y+1] == 7)) {
			_dfs(x , y+1, Len - 1);
		}
	}
	else if (map[x][y] == 2) {
		if (x - 1 >= 0 && visit[x - 1][y] <= Len && (map[x - 1][y] == 1 || map[x - 1][y] == 2 || map[x - 1][y] == 5 || map[x - 1][y] == 6)) {
			_dfs(x - 1, y, Len - 1);
		}if (x + 1 < N && visit[x + 1][y] <= Len && (map[x + 1][y] == 1 || map[x + 1][y] == 2 || map[x + 1][y] == 4 || map[x + 1][y] == 7)) {
			_dfs(x + 1, y, Len - 1);
		}
	}
	else if (map[x][y]== 3) {
		if (y - 1 >= 0 && visit[x][y - 1] <= Len && (map[x][y - 1] == 1 || map[x][y - 1] == 3 || map[x][y - 1] == 4 || map[x][y - 1] == 5)) {
			_dfs(x, y - 1, Len - 1);
		}if (y + 1 < M && visit[x][y + 1] <= Len && (map[x][y + 1] == 1 || map[x][y + 1] == 3 || map[x][y + 1] == 6 || map[x][y + 1] == 7)) {
			_dfs(x, y + 1, Len - 1);
		}
	}
	else if (map[x][y] == 4) {
		if (x - 1 >= 0 && visit[x - 1][y] <= Len && (map[x - 1][y] == 1 || map[x - 1][y] == 2 || map[x - 1][y] == 5 || map[x - 1][y] == 6)) {
			_dfs(x - 1, y, Len - 1);
		}if (y + 1 < M && visit[x][y + 1] <= Len && (map[x][y + 1] == 1 || map[x][y + 1] == 3 || map[x][y + 1] == 6 || map[x][y + 1] == 7)) {
			_dfs(x, y + 1, Len - 1);
		}
	}
	else if (map[x][y] == 5) {
		if (x + 1 < N && visit[x + 1][y] <= Len && (map[x + 1][y] == 1 || map[x + 1][y] == 2 || map[x + 1][y] == 4 || map[x + 1][y] == 7)) {
			_dfs(x + 1, y, Len - 1);
		}if (y + 1 < M && visit[x][y + 1] <= Len && (map[x][y + 1] == 1 || map[x][y + 1] == 3 || map[x][y + 1] == 6 || map[x][y + 1] == 7)) {
			_dfs(x, y + 1, Len - 1);
		}
	}
	else if (map[x][y] == 6) {
		if (x + 1 < N && visit[x + 1][y] <= Len && (map[x + 1][y] == 1 || map[x + 1][y] == 2 || map[x + 1][y] == 4 || map[x + 1][y] == 7)) {
			_dfs(x + 1, y, Len - 1);
		}if (y - 1 >= 0 && visit[x][y - 1] <= Len && (map[x][y - 1] == 1 || map[x][y - 1] == 3 || map[x][y - 1] == 4 || map[x][y - 1] == 5)) {
			_dfs(x, y - 1, Len - 1);
		}
	}
	else if (map[x][y] == 7) {
		if (y - 1 >= 0 && visit[x][y - 1] <= Len && (map[x][y - 1] == 1 || map[x][y - 1] == 3 || map[x][y - 1] == 4 || map[x][y - 1] == 5)) {
			_dfs(x, y - 1, Len - 1);
		}if (x - 1 >= 0 && visit[x - 1][y] <= Len && (map[x - 1][y] == 1 || map[x - 1][y] == 2 || map[x - 1][y] == 5 || map[x - 1][y] == 6)) {
			_dfs(x - 1, y, Len - 1);
		}
	}
}

int main() {
	int T;
	int i, j, k;
	cin >> T;
	for (i = 1; i <= T; i++) {
		cin >> N >> M >> R >> C >> L;
		for (j = 0; j < N; j++) {
			for (k = 0; k < M; k++) {
				cin >> map[j][k];
			}
		}
		totalCnt = 0;

		_dfs(R, C, L);

		for (j = 0; j < N; j++) {
			for (k = 0; k < M; k++) {
				if (visit[j][k]>0 && visit[j][k] <= L) {
					totalCnt++;
				}
			}
		}

		printf("\n");
		for (j = 0; j < N; j++) {
			for (k = 0; k < M; k++) {
				printf("%2d ", visit[j][k]);
			}
			printf("\n");
		}

		printf("#%d %d\n", i, totalCnt);
		memset(visit, 0, sizeof(visit));
	}
	return 0;
}
